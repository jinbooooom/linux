// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_TESTFLAT_H_
#define FLATBUFFERS_GENERATED_TEST_TESTFLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace TestFlat {

struct KV;

struct Picture;

struct TestObj;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) KV FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t key_;
  double value_;

 public:
  KV() {
    memset(static_cast<void *>(this), 0, sizeof(KV));
  }
  KV(uint64_t _key, double _value)
      : key_(flatbuffers::EndianScalar(_key)),
        value_(flatbuffers::EndianScalar(_value)) {
  }
  uint64_t key() const {
    return flatbuffers::EndianScalar(key_);
  }
  double value() const {
    return flatbuffers::EndianScalar(value_);
  }
};
FLATBUFFERS_STRUCT_END(KV, 16);

struct Picture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4,
    VT_SIZE = 6,
    VT_DATA = 8
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct PictureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(Picture::VT_PATH, path);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(Picture::VT_SIZE, size, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Picture::VT_DATA, data);
  }
  explicit PictureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PictureBuilder &operator=(const PictureBuilder &);
  flatbuffers::Offset<Picture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Picture>(end);
    return o;
  }
};

inline flatbuffers::Offset<Picture> CreatePicture(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    uint32_t size = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  PictureBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_size(size);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<Picture> CreatePictureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr,
    uint32_t size = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return TestFlat::CreatePicture(
      _fbb,
      path__,
      size,
      data__);
}

struct TestObj FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PICTURE = 6,
    VT_FLAG = 8,
    VT_LIST = 10,
    VT_KV = 12
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const Picture *picture() const {
    return GetPointer<const Picture *>(VT_PICTURE);
  }
  uint8_t flag() const {
    return GetField<uint8_t>(VT_FLAG, 0);
  }
  const flatbuffers::Vector<uint64_t> *list() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_LIST);
  }
  const KV *kv() const {
    return GetStruct<const KV *>(VT_KV);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_PICTURE) &&
           verifier.VerifyTable(picture()) &&
           VerifyField<uint8_t>(verifier, VT_FLAG) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyVector(list()) &&
           VerifyField<KV>(verifier, VT_KV) &&
           verifier.EndTable();
  }
};

struct TestObjBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(TestObj::VT_ID, id, 0);
  }
  void add_picture(flatbuffers::Offset<Picture> picture) {
    fbb_.AddOffset(TestObj::VT_PICTURE, picture);
  }
  void add_flag(uint8_t flag) {
    fbb_.AddElement<uint8_t>(TestObj::VT_FLAG, flag, 0);
  }
  void add_list(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> list) {
    fbb_.AddOffset(TestObj::VT_LIST, list);
  }
  void add_kv(const KV *kv) {
    fbb_.AddStruct(TestObj::VT_KV, kv);
  }
  explicit TestObjBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestObjBuilder &operator=(const TestObjBuilder &);
  flatbuffers::Offset<TestObj> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TestObj>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestObj> CreateTestObj(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    flatbuffers::Offset<Picture> picture = 0,
    uint8_t flag = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> list = 0,
    const KV *kv = 0) {
  TestObjBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_kv(kv);
  builder_.add_list(list);
  builder_.add_picture(picture);
  builder_.add_flag(flag);
  return builder_.Finish();
}

inline flatbuffers::Offset<TestObj> CreateTestObjDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    flatbuffers::Offset<Picture> picture = 0,
    uint8_t flag = 0,
    const std::vector<uint64_t> *list = nullptr,
    const KV *kv = 0) {
  auto list__ = list ? _fbb.CreateVector<uint64_t>(*list) : 0;
  return TestFlat::CreateTestObj(
      _fbb,
      id,
      picture,
      flag,
      list__,
      kv);
}

inline const TestFlat::TestObj *GetTestObj(const void *buf) {
  return flatbuffers::GetRoot<TestFlat::TestObj>(buf);
}

inline const TestFlat::TestObj *GetSizePrefixedTestObj(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<TestFlat::TestObj>(buf);
}

inline bool VerifyTestObjBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestFlat::TestObj>(nullptr);
}

inline bool VerifySizePrefixedTestObjBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TestFlat::TestObj>(nullptr);
}

inline void FinishTestObjBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TestFlat::TestObj> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestObjBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TestFlat::TestObj> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace TestFlat

#endif  // FLATBUFFERS_GENERATED_TEST_TESTFLAT_H_
